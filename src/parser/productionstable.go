// Code generated by gocc; DO NOT EDIT.

package parser

import "ast"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Package	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Package : "package" str PackageBody	<< ast.NewPackageDef(X[1], X[2]), nil >>`,
		Id:         "Package",
		NTType:     1,
		Index:      1,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPackageDef(X[1], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `PackageBody : empty	<< ast.NewPackageBody(), nil >>`,
		Id:         "PackageBody",
		NTType:     2,
		Index:      2,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPackageBody(), nil
		},
	},
	ProdTabEntry{
		String: `PackageBody : PackageBody Import	<< ast.ImportToPackageBody(X[0], X[1]), nil >>`,
		Id:         "PackageBody",
		NTType:     2,
		Index:      3,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ImportToPackageBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `PackageBody : PackageBody PackageElement	<< ast.AddToPackageBody(X[0], X[1]), nil >>`,
		Id:         "PackageBody",
		NTType:     2,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToPackageBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `PackageElement : ClassDef	<< X[0], nil >>`,
		Id:         "PackageElement",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PackageElement : StructDef	<< X[0], nil >>`,
		Id:         "PackageElement",
		NTType:     3,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PackageElement : EnumDef	<< X[0], nil >>`,
		Id:         "PackageElement",
		NTType:     3,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Import : Attributes "use" str	<< ast.NewImport(X[2], X[0]), nil >>`,
		Id:         "Import",
		NTType:     4,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewImport(X[2], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `ClassDef : Attributes "class" letters "{" StructBody "}"	<< ast.NewClassDef(X[2], "", X[4], X[0]), nil >>`,
		Id:         "ClassDef",
		NTType:     5,
		Index:      9,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewClassDef(X[2], "", X[4], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `ClassDef : Attributes "class" letters ":" letters "{" StructBody "}"	<< ast.NewClassDef(X[2], X[4], X[6], X[0]), nil >>`,
		Id:         "ClassDef",
		NTType:     5,
		Index:      10,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewClassDef(X[2], X[4], X[6], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `StructDef : Attributes "struct" letters "{" StructBody "}"	<< ast.NewStructDef(X[2], "", X[4], X[0]), nil >>`,
		Id:         "StructDef",
		NTType:     6,
		Index:      11,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructDef(X[2], "", X[4], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `StructDef : Attributes "struct" letters ":" letters "{" StructBody "}"	<< ast.NewStructDef(X[2], X[4], X[6], X[0]), nil >>`,
		Id:         "StructDef",
		NTType:     6,
		Index:      12,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructDef(X[2], X[4], X[6], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `EnumDef : Attributes "enum" letters "{" EnumBody "}"	<< ast.NewEnumDef(X[2], X[4], X[0]), nil >>`,
		Id:         "EnumDef",
		NTType:     7,
		Index:      13,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEnumDef(X[2], X[4], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "int"	<< ast.NewGenericType(ast.Integer32), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Integer32), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "int32"	<< ast.NewGenericType(ast.Integer32), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Integer32), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "int64"	<< ast.NewGenericType(ast.Integer64), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Integer64), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "long"	<< ast.NewGenericType(ast.Integer64), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Integer64), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "short"	<< ast.NewGenericType(ast.Short), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Short), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "uint"	<< ast.NewGenericType(ast.UnsignedInteger32), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedInteger32), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "uint32"	<< ast.NewGenericType(ast.UnsignedInteger32), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedInteger32), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "uint64"	<< ast.NewGenericType(ast.UnsignedInteger64), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedInteger64), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "ulong"	<< ast.NewGenericType(ast.UnsignedInteger64), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedInteger64), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "ushort"	<< ast.NewGenericType(ast.UnsignedShort), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedShort), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "byte"	<< ast.NewGenericType(ast.Byte), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Byte), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "bool"	<< ast.NewGenericType(ast.Bool), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Bool), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "string"	<< ast.NewGenericType(ast.String), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.String), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "char"	<< ast.NewGenericType(ast.Char), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Char), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "float"	<< ast.NewGenericType(ast.Float), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Float), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "double"	<< ast.NewGenericType(ast.Double), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Double), nil
		},
	},
	ProdTabEntry{
		String: `Type : GenericType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     9,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : letters	<< ast.NewType(X[0]), nil >>`,
		Id:         "Type",
		NTType:     9,
		Index:      31,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Type : Type "[]"	<< ast.NewArrayOfType(X[0]), nil >>`,
		Id:         "Type",
		NTType:     9,
		Index:      32,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewArrayOfType(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Type : Type "[" integer "]"	<< ast.NewArrayOfTypeWithSize(X[0], X[2]), nil >>`,
		Id:         "Type",
		NTType:     9,
		Index:      33,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewArrayOfTypeWithSize(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `VarDecl : Attributes Type letters	<< ast.NewVariable(X[1], X[2], X[0]), nil >>`,
		Id:         "VarDecl",
		NTType:     10,
		Index:      34,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewVariable(X[1], X[2], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `StructBody : empty	<< ast.NewStructBody(), nil >>`,
		Id:         "StructBody",
		NTType:     11,
		Index:      35,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructBody(), nil
		},
	},
	ProdTabEntry{
		String: `StructBody : StructBody VarDecl	<< ast.AddToStructBody(X[0], X[1]), nil >>`,
		Id:         "StructBody",
		NTType:     11,
		Index:      36,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToStructBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `EnumBody : empty	<< ast.NewEnumBody(), nil >>`,
		Id:         "EnumBody",
		NTType:     12,
		Index:      37,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEnumBody(), nil
		},
	},
	ProdTabEntry{
		String: `EnumBody : EnumBody letters ","	<< ast.AddToEnumBody(X[0], X[1]), nil >>`,
		Id:         "EnumBody",
		NTType:     12,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToEnumBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `KeyOnlyAttribute : "@" letters	<< ast.NewKeyOnlyAttribute(X[1]), nil >>`,
		Id:         "KeyOnlyAttribute",
		NTType:     13,
		Index:      39,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewKeyOnlyAttribute(X[1]), nil
		},
	},
	ProdTabEntry{
		String: `OneLineAttribute : "@" letters ":" anything "\n"	<< ast.NewAttribute(X[1], X[3]), nil >>`,
		Id:         "OneLineAttribute",
		NTType:     14,
		Index:      40,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttribute(X[1], X[3]), nil
		},
	},
	ProdTabEntry{
		String: `AttributeGroup : "@" "{" AttributeGroupBody "}"	<< ast.NewAttributeGroup(X[2]), nil >>`,
		Id:         "AttributeGroup",
		NTType:     15,
		Index:      41,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttributeGroup(X[2]), nil
		},
	},
	ProdTabEntry{
		String: `AttributeGroupBody : empty	<< ast.NewAttributeGroupBody(), nil >>`,
		Id:         "AttributeGroupBody",
		NTType:     16,
		Index:      42,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttributeGroupBody(), nil
		},
	},
	ProdTabEntry{
		String: `AttributeGroupBody : AttributeGroupBody AttributeGroupElement	<< ast.AddToAttributeGroupBody(X[0], X[1]) >>`,
		Id:         "AttributeGroupBody",
		NTType:     16,
		Index:      43,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToAttributeGroupBody(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `AttributeGroupElement : letters ","	<< ast.NewKeyOnlyAttribute(X[0]), nil >>`,
		Id:         "AttributeGroupElement",
		NTType:     17,
		Index:      44,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewKeyOnlyAttribute(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `AttributeGroupElement : letters ":" anything ","	<< ast.NewAttribute(X[0], X[2]), nil >>`,
		Id:         "AttributeGroupElement",
		NTType:     17,
		Index:      45,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttribute(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `SingleAttribute : KeyOnlyAttribute	<< X[0], nil >>`,
		Id:         "SingleAttribute",
		NTType:     18,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SingleAttribute : OneLineAttribute	<< X[0], nil >>`,
		Id:         "SingleAttribute",
		NTType:     18,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Attributes : empty	<< ast.NewAttributesList(), nil >>`,
		Id:         "Attributes",
		NTType:     19,
		Index:      48,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttributesList(), nil
		},
	},
	ProdTabEntry{
		String: `Attributes : Attributes SingleAttribute	<< ast.AddToAttributesList(X[0], X[1]), nil >>`,
		Id:         "Attributes",
		NTType:     19,
		Index:      49,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToAttributesList(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `Attributes : Attributes AttributeGroup	<< ast.AddGroupToAttributesList(X[0], X[1]) >>`,
		Id:         "Attributes",
		NTType:     19,
		Index:      50,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddGroupToAttributesList(X[0], X[1])
		},
	},
}
