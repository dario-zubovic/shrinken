/* Shrinken Data Description Language */

/* lexical elements: */

!whitespace: ' ' | '\t' | '\n' | '\r';
!comment: _lineComment | _blockComment;

_lineComment: '/' '/' {.} '\n';
_blockComment: '/' '*' {. | '*'} '*' '/';

_digit: '0'-'9';
integer: '1'-'9' {_digit};

str: '"' {.} '"';

_letter: 'a'-'z' | 'A'-'Z' | '_';
letters: _letter {_letter | _digit};

/* syntax definition: */

<< import "ast" >>

Package: "package" str PackageBody                              << ast.NewPackageDef($1, $2), nil >> ;

PackageBody: empty                                              << ast.NewPackageBody(), nil >>
           | PackageBody Import                                 << ast.ImportToPackageBody($0, $1) >>
           | PackageBody PackageElement                         << ast.AddToPackageBody($0, $1), nil >> ;

PackageElement: ClassDef                                        << $0, nil >>
              | StructDef                                       << $0, nil >>
              | EnumDef                                         << $0, nil >> ;

Import: "use" str                                               << ast.NewImport($1), nil >> ;

ClassDef: "class" letters "{" StructBody "}"                    << ast.NewClasDef($1, "", $3), nil >>
        | "class" letters ":" letters "{" StructBody "}"        << ast.NewClassDef($1, $3, $5), nil >> ;

StructDef: "struct" letters "{" StructBody "}"                  << ast.NewStructDef($1, "", $3), nil >>
         | "struct" letters ":" letters "{" StructBody "}"      << ast.NewStructDef($1, $3, $5), nil >> ;

EnumDef: "enum" letters "{" EnumBody "}"                        << ast.NewEnumDef($1, $3), nil >> ;

GenericType: "int"                                              << ast.NewGenericType(ast.Integer32), nil >>
           | "int32"                                            << ast.NewGenericType(ast.Integer32), nil >>
           | "int64"                                            << ast.NewGenericType(ast.Integer64), nil >>
           | "long"                                             << ast.NewGenericType(ast.Integer64), nil >>
           | "short"                                            << ast.NewGenericType(ast.Short), nil >>
           | "uint"                                             << ast.NewGenericType(ast.UnsignedInteger32), nil >>
           | "uint32"                                           << ast.NewGenericType(ast.UnsignedInteger32), nil >>
           | "uint64"                                           << ast.NewGenericType(ast.UnsignedInteger64), nil >>
           | "ulong"                                            << ast.NewGenericType(ast.UnsignedInteger64), nil >>
           | "ushort"                                           << ast.NewGenericType(ast.UnsignedShort), nil >>
           | "byte"                                             << ast.NewGenericType(ast.Byte), nil >>
           | "bool"                                             << ast.NewGenericType(ast.Bool), nil >>
           | "string"                                           << ast.NewGenericType(ast.String), nil >>
           | "char"                                             << ast.NewGenericType(ast.Char), nil >>
           | "float"                                            << ast.NewGenericType(ast.Float), nil >>
           | "double"                                           << ast.NewGenericType(ast.Double), nil >> ;

Type: GenericType                                               << $0, nil >>
    | letters                                                   << ast.NewType($0), nil >>
    | Type "[]"                                                 << ast.NewArrayOfType($0), nil >>
    | Type "[" integer "]"                                      << ast.NewArrayOfTypeWithSize($0, $2), nil >> ;

VarDecl: Type letters                                           << ast.NewVariable($0, $1), nil >> ;

StructBody: empty                                               << ast.NewStructBody(), nil >>
          | StructBody VarDecl                                  << ast.AddToStructBody($0, $1) >> ;

EnumBody: empty                                                 << ast.NewEnumBody(), nil >>
        | EnumBody letters ","                                  << ast.AddToEnumBody($0, $1), nil >> ;