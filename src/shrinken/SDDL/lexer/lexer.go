// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"shrinken/SDDL/token"
)

const (
	NoState    = -1
	NumStates  = 104
	NumSymbols = 134
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: 'p'
3: 'a'
4: 'c'
5: 'k'
6: 'a'
7: 'g'
8: 'e'
9: 'u'
10: 's'
11: 'e'
12: 'c'
13: 'l'
14: 'a'
15: 's'
16: 's'
17: '{'
18: '}'
19: ':'
20: 's'
21: 't'
22: 'r'
23: 'u'
24: 'c'
25: 't'
26: 'e'
27: 'n'
28: 'u'
29: 'm'
30: 'i'
31: 'n'
32: 't'
33: 'i'
34: 'n'
35: 't'
36: '3'
37: '2'
38: 'i'
39: 'n'
40: 't'
41: '6'
42: '4'
43: 'l'
44: 'o'
45: 'n'
46: 'g'
47: 's'
48: 'h'
49: 'o'
50: 'r'
51: 't'
52: 'u'
53: 'i'
54: 'n'
55: 't'
56: 'u'
57: 'i'
58: 'n'
59: 't'
60: '3'
61: '2'
62: 'u'
63: 'i'
64: 'n'
65: 't'
66: '6'
67: '4'
68: 'u'
69: 'l'
70: 'o'
71: 'n'
72: 'g'
73: 'u'
74: 's'
75: 'h'
76: 'o'
77: 'r'
78: 't'
79: 'b'
80: 'y'
81: 't'
82: 'e'
83: 'b'
84: 'o'
85: 'o'
86: 'l'
87: 's'
88: 't'
89: 'r'
90: 'i'
91: 'n'
92: 'g'
93: 'c'
94: 'h'
95: 'a'
96: 'r'
97: 'f'
98: 'l'
99: 'o'
100: 'a'
101: 't'
102: 'd'
103: 'o'
104: 'u'
105: 'b'
106: 'l'
107: 'e'
108: '['
109: ']'
110: '['
111: ']'
112: ','
113: '@'
114: '\'
115: 'n'
116: '/'
117: '/'
118: '\n'
119: '/'
120: '*'
121: '*'
122: '*'
123: '/'
124: '_'
125: ' '
126: '\t'
127: '\n'
128: '\r'
129: '1'-'9'
130: '0'-'9'
131: 'a'-'z'
132: 'A'-'Z'
133: .
*/
