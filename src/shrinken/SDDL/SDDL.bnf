// Shrinken Data Description Language

/******************************
**     lexical elements:     **
******************************/

!whitespace: ' ' | '\t' | '\n' | '\r';
!comment: _lineComment | _blockComment;

_lineComment: '/' '/' {.} '\n';
_blockComment: '/' '*' {. | '*'} '*' '/';

_digit: '0'-'9';
_positiveInteger: '1'-'9' {_digit};
integer: '-' _positiveInteger | '0' | _positiveInteger;

_positiveReal: _digit {_digit} '.' _digit {_digit};
realNumber: '-' _positiveReal | _positiveReal;

str: '"' {.} '"';

_letter: 'a'-'z' | 'A'-'Z' | '_';
letters: _letter {_letter | _digit};

// extended letters are used for pre-generator flags (for target language names)
// _extendedLetter: _letter | '.' | '#';
// extendedLetters: _letter { _extendedLetter | _digit }

/******************************
**    syntax definitions:    **
******************************/

<< import "shrinken/SDDL/ast"
   import "shrinken/SDDL/ast/attributes" 
   import "math" >>

/**************************************
**    generic syntax definitions:    **
***************************************/

Package: Attributes "package" str PackageBody                   << ast.NewPackageDef($2, $3, $0), nil >> ;

PackageBody: empty                                              << ast.NewPackageBody(), nil >>
           | PackageBody Import                                 << ast.ImportToPackageBody($0, $1), nil >>
           | PackageBody PackageElement                         << ast.AddToPackageBody($0, $1), nil >> ;

PackageElement: ClassDef                                        << $0, nil >>
              | StructDef                                       << $0, nil >>
              | EnumDef                                         << $0, nil >> ;

Import: Attributes "use" str                                    << ast.NewImport($2, $0), nil >> ;

ClassDef: Attributes "class" letters "{" StructBody "}"                    << ast.NewClassDef($2, $4, $0), nil >>
        | Attributes "class" letters ":" letters "{" StructBody "}"        << ast.NewDerivedClassDef($2, $4, $6, $0), nil >> ;

StructDef: Attributes "struct" letters "{" StructBody "}"                  << ast.NewStructDef($2, $4, $0), nil >>
         | Attributes "struct" letters ":" letters "{" StructBody "}"      << ast.NewDerivedStructDef($2, $4, $6, $0), nil >> ;

EnumDef: Attributes "enum" letters "{" EnumBody "}"             << ast.NewEnumDef($2, $4, $0), nil >> ;

GenericType: "int"                                              << ast.NewGenericType(ast.Integer32), nil >>
           | "int32"                                            << ast.NewGenericType(ast.Integer32), nil >>
           | "int64"                                            << ast.NewGenericType(ast.Integer64), nil >>
           | "long"                                             << ast.NewGenericType(ast.Integer64), nil >>
           | "short"                                            << ast.NewGenericType(ast.Short), nil >>
           | "uint"                                             << ast.NewGenericType(ast.UnsignedInteger32), nil >>
           | "uint32"                                           << ast.NewGenericType(ast.UnsignedInteger32), nil >>
           | "uint64"                                           << ast.NewGenericType(ast.UnsignedInteger64), nil >>
           | "ulong"                                            << ast.NewGenericType(ast.UnsignedInteger64), nil >>
           | "ushort"                                           << ast.NewGenericType(ast.UnsignedShort), nil >>
           | "byte"                                             << ast.NewGenericType(ast.Byte), nil >>
           | "bool"                                             << ast.NewGenericType(ast.Bool), nil >>
           | "string"                                           << ast.NewGenericType(ast.String), nil >>
           | "char"                                             << ast.NewGenericType(ast.Char), nil >>
           | "float"                                            << ast.NewGenericType(ast.Float), nil >>
           | "double"                                           << ast.NewGenericType(ast.Double), nil >> ;

Type: GenericType                                               << $0, nil >>
    | letters                                                   << ast.NewType($0), nil >>
    | Type "[]"                                                 << ast.NewArrayOfType($0), nil >>
    | Type "[" integer "]"                                      << ast.NewArrayOfTypeWithSize($0, $2), nil >> ;

VarDecl: Attributes Type letters                                << ast.NewVariable($1, $2, $0), nil >> ;

MultiVarDecl: Attributes Type letters "," letters               << ast.NewMultiVariable($1, $2, $4, $0), nil >>
            | MultiVarDecl "," letters                          << ast.AddToMultiVariable($0, $2), nil >> ;

StructBody: empty                                               << ast.NewStructBody(), nil >>
          | StructBody VarDecl                                  << ast.AddToStructBody($0, $1), nil >>
          | StructBody MultiVarDecl                             << ast.AddMultiVariableToStructBody($0, $1), nil >> ;

EnumBody: empty                                                 << ast.NewEnumBody(), nil >>
        | EnumBody letters ","                                  << ast.AddToEnumBody($0, $1), nil >> ;

/**************************************
**   attributes syntax definitions:  **
***************************************/

AttributeGroup: "@" "{" AttributeGroupBody "}"                  << ast.NewAttributeGroup($2), nil >> ;

AttributeGroupBody: empty                                       << ast.NewAttributeGroupBody(), nil >> 
                  | AttributeGroupBody AttributeGroupElement    << ast.AddToAttributeGroupBody($0, $1), nil >> ;

AttributeGroupElement: Attribute ","                            << $0, nil >> ;

SingleAttribute: "@" Attribute                                  << $1, nil >> ;

Attributes: empty                                               << ast.NewAttributesList(), nil >>
          | Attributes SingleAttribute                          << ast.AddToAttributesList($0, $1), nil >>
          | Attributes AttributeGroup                           << ast.AddGroupToAttributesList($0, $1), nil >> ;

Attribute: RangeAttribute                                       << $0, nil >>
         | ExportAsAttribute                                    << $0, nil >>
         | PrecisionAttribute                                   << $0, nil >>
//         | VersionAttribute                                     << $0, nil >>
         | MessageAttribute                                     << $0, nil >> ;

RangeAttribute: "range" ":" Range                               << attributes.NewRangeAttribute($2), nil >> ;

ExportAsAttribute: "exportAs" ":" str                           << attributes.NewExportAsAttribute($2), nil >> ;

PrecisionAttribute: "precision" ":" MathExpr                    << attributes.NewPrecisionAttribute($2), nil >> ;

// VersionAttribute: "version" ":" integer                         << attributes.NewVersionAttribute($2), nil >> ;

MessageAttribute: "message"                                     << attributes.NewMessageAttribute(), nil >> ;

Range: "[" MathExpr "," MathExpr "]"                            << ast.NewRange($1, true, $3, true) >>
     | "[" MathExpr "," MathExpr ">"                            << ast.NewRange($1, true, $3, false) >>
     | "<" MathExpr "," MathExpr "]"                            << ast.NewRange($1, false, $3, true) >>
     | "<" MathExpr "," MathExpr ">"                            << ast.NewRange($1, false, $3, false) >> ;

Number: integer                                                 << ast.ToFloat64($0), nil >>
      | realNumber                                              << ast.ToFloat64($0), nil >>
      | "pi"                                                    << math.Pi, nil >>
      | "e"                                                     << math.E, nil >>
      | "-" "inf"                                               << math.Inf(-1), nil >>                                                  
      | "inf"                                                   << math.Inf(1), nil >> ;

MathExpr: AddSub;

AddSub: AddSub "+" MulDiv                                       << $0.(float64) + $2.(float64), nil >>
      | AddSub "-" MulDiv                                       << $0.(float64) - $2.(float64), nil >>
      | MulDiv                                                  << $0, nil >> ;

MulDiv: MulDiv "*" Pot                                          << $0.(float64) * $2.(float64), nil >>
      | MulDiv "/" Pot                                          << $0.(float64) / $2.(float64), nil >>
      | Pot                                                     << $0, nil >> ;

Pot: Pot "^" Factor                                             << math.Pow($0.(float64), $2.(float64)), nil >>
   | Factor                                                     << $0, nil >> ;

Factor: "sqrt(" AddSub ")"                                      << math.Sqrt($1.(float64)), nil >>
      | "(" AddSub ")"                                          << $1, nil >>
      | AddSub                                                  << $0, nil >>
      | Number                                                  << $0, nil >> ;

// TODO: pre-generator flags (language-specifics)