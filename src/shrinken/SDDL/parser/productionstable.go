// Code generated by gocc; DO NOT EDIT.

package parser

import "shrinken/SDDL/ast"
   import "shrinken/SDDL/ast/attributes" 
   import "math"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Package	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Package : Attributes "package" str PackageBody	<< ast.NewPackageDef(X[2], X[3], X[0]), nil >>`,
		Id:         "Package",
		NTType:     1,
		Index:      1,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPackageDef(X[2], X[3], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `PackageBody : empty	<< ast.NewPackageBody(), nil >>`,
		Id:         "PackageBody",
		NTType:     2,
		Index:      2,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPackageBody(), nil
		},
	},
	ProdTabEntry{
		String: `PackageBody : PackageBody Import	<< ast.ImportToPackageBody(X[0], X[1]), nil >>`,
		Id:         "PackageBody",
		NTType:     2,
		Index:      3,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ImportToPackageBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `PackageBody : PackageBody PackageElement	<< ast.AddToPackageBody(X[0], X[1]), nil >>`,
		Id:         "PackageBody",
		NTType:     2,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToPackageBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `PackageElement : ClassDef	<< X[0], nil >>`,
		Id:         "PackageElement",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PackageElement : StructDef	<< X[0], nil >>`,
		Id:         "PackageElement",
		NTType:     3,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PackageElement : EnumDef	<< X[0], nil >>`,
		Id:         "PackageElement",
		NTType:     3,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Import : Attributes "use" str	<< ast.NewImport(X[2], X[0]), nil >>`,
		Id:         "Import",
		NTType:     4,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewImport(X[2], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `ClassDef : Attributes "class" letters "{" StructBody "}"	<< ast.NewClassDef(X[2], X[4], X[0]), nil >>`,
		Id:         "ClassDef",
		NTType:     5,
		Index:      9,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewClassDef(X[2], X[4], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `ClassDef : Attributes "class" letters ":" letters "{" StructBody "}"	<< ast.NewDerivedClassDef(X[2], X[4], X[6], X[0]), nil >>`,
		Id:         "ClassDef",
		NTType:     5,
		Index:      10,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewDerivedClassDef(X[2], X[4], X[6], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `StructDef : Attributes "struct" letters "{" StructBody "}"	<< ast.NewStructDef(X[2], X[4], X[0]), nil >>`,
		Id:         "StructDef",
		NTType:     6,
		Index:      11,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructDef(X[2], X[4], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `StructDef : Attributes "struct" letters ":" letters "{" StructBody "}"	<< ast.NewDerivedStructDef(X[2], X[4], X[6], X[0]), nil >>`,
		Id:         "StructDef",
		NTType:     6,
		Index:      12,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewDerivedStructDef(X[2], X[4], X[6], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `EnumDef : Attributes "enum" letters "{" EnumBody "}"	<< ast.NewEnumDef(X[2], X[4], X[0]), nil >>`,
		Id:         "EnumDef",
		NTType:     7,
		Index:      13,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEnumDef(X[2], X[4], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "int"	<< ast.NewGenericType(ast.Integer32), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Integer32), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "int32"	<< ast.NewGenericType(ast.Integer32), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Integer32), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "int64"	<< ast.NewGenericType(ast.Integer64), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Integer64), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "long"	<< ast.NewGenericType(ast.Integer64), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Integer64), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "short"	<< ast.NewGenericType(ast.Short), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Short), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "uint"	<< ast.NewGenericType(ast.UnsignedInteger32), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedInteger32), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "uint32"	<< ast.NewGenericType(ast.UnsignedInteger32), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedInteger32), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "uint64"	<< ast.NewGenericType(ast.UnsignedInteger64), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedInteger64), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "ulong"	<< ast.NewGenericType(ast.UnsignedInteger64), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedInteger64), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "ushort"	<< ast.NewGenericType(ast.UnsignedShort), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.UnsignedShort), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "byte"	<< ast.NewGenericType(ast.Byte), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Byte), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "bool"	<< ast.NewGenericType(ast.Bool), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Bool), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "string"	<< ast.NewGenericType(ast.String), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.String), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "char"	<< ast.NewGenericType(ast.Char), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Char), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "float"	<< ast.NewGenericType(ast.Float), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Float), nil
		},
	},
	ProdTabEntry{
		String: `GenericType : "double"	<< ast.NewGenericType(ast.Double), nil >>`,
		Id:         "GenericType",
		NTType:     8,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGenericType(ast.Double), nil
		},
	},
	ProdTabEntry{
		String: `Type : GenericType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     9,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : letters	<< ast.NewType(X[0]), nil >>`,
		Id:         "Type",
		NTType:     9,
		Index:      31,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Type : Type "[]"	<< ast.NewArrayOfType(X[0]), nil >>`,
		Id:         "Type",
		NTType:     9,
		Index:      32,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewArrayOfType(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Type : Type "[" integer "]"	<< ast.NewArrayOfTypeWithSize(X[0], X[2]), nil >>`,
		Id:         "Type",
		NTType:     9,
		Index:      33,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewArrayOfTypeWithSize(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `VarDecl : Attributes Type letters	<< ast.NewVariable(X[1], X[2], X[0]), nil >>`,
		Id:         "VarDecl",
		NTType:     10,
		Index:      34,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewVariable(X[1], X[2], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `MultiVarDecl : Attributes Type letters "," letters	<< ast.NewMultiVariable(X[1], X[2], X[4], X[0]), nil >>`,
		Id:         "MultiVarDecl",
		NTType:     11,
		Index:      35,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewMultiVariable(X[1], X[2], X[4], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `MultiVarDecl : MultiVarDecl "," letters	<< ast.AddToMultiVariable(X[0], X[2]), nil >>`,
		Id:         "MultiVarDecl",
		NTType:     11,
		Index:      36,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToMultiVariable(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `StructBody : empty	<< ast.NewStructBody(), nil >>`,
		Id:         "StructBody",
		NTType:     12,
		Index:      37,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructBody(), nil
		},
	},
	ProdTabEntry{
		String: `StructBody : StructBody VarDecl	<< ast.AddToStructBody(X[0], X[1]), nil >>`,
		Id:         "StructBody",
		NTType:     12,
		Index:      38,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToStructBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `StructBody : StructBody MultiVarDecl	<< ast.AddMultiVariableToStructBody(X[0], X[1]), nil >>`,
		Id:         "StructBody",
		NTType:     12,
		Index:      39,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddMultiVariableToStructBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `EnumBody : empty	<< ast.NewEnumBody(), nil >>`,
		Id:         "EnumBody",
		NTType:     13,
		Index:      40,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEnumBody(), nil
		},
	},
	ProdTabEntry{
		String: `EnumBody : EnumBody letters ","	<< ast.AddToEnumBody(X[0], X[1]), nil >>`,
		Id:         "EnumBody",
		NTType:     13,
		Index:      41,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToEnumBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `AttributeGroup : "@" "{" AttributeGroupBody "}"	<< ast.NewAttributeGroup(X[2]), nil >>`,
		Id:         "AttributeGroup",
		NTType:     14,
		Index:      42,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttributeGroup(X[2]), nil
		},
	},
	ProdTabEntry{
		String: `AttributeGroupBody : empty	<< ast.NewAttributeGroupBody(), nil >>`,
		Id:         "AttributeGroupBody",
		NTType:     15,
		Index:      43,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttributeGroupBody(), nil
		},
	},
	ProdTabEntry{
		String: `AttributeGroupBody : AttributeGroupBody AttributeGroupElement	<< ast.AddToAttributeGroupBody(X[0], X[1]), nil >>`,
		Id:         "AttributeGroupBody",
		NTType:     15,
		Index:      44,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToAttributeGroupBody(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `AttributeGroupElement : Attribute ","	<< X[0], nil >>`,
		Id:         "AttributeGroupElement",
		NTType:     16,
		Index:      45,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SingleAttribute : "@" Attribute	<< X[1], nil >>`,
		Id:         "SingleAttribute",
		NTType:     17,
		Index:      46,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Attributes : empty	<< ast.NewAttributesList(), nil >>`,
		Id:         "Attributes",
		NTType:     18,
		Index:      47,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttributesList(), nil
		},
	},
	ProdTabEntry{
		String: `Attributes : Attributes SingleAttribute	<< ast.AddToAttributesList(X[0], X[1]), nil >>`,
		Id:         "Attributes",
		NTType:     18,
		Index:      48,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddToAttributesList(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `Attributes : Attributes AttributeGroup	<< ast.AddGroupToAttributesList(X[0], X[1]), nil >>`,
		Id:         "Attributes",
		NTType:     18,
		Index:      49,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddGroupToAttributesList(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `Attribute : RangeAttribute	<< X[0], nil >>`,
		Id:         "Attribute",
		NTType:     19,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Attribute : ExportAsAttribute	<< X[0], nil >>`,
		Id:         "Attribute",
		NTType:     19,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Attribute : PrecisionAttribute	<< X[0], nil >>`,
		Id:         "Attribute",
		NTType:     19,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Attribute : MessageAttribute	<< X[0], nil >>`,
		Id:         "Attribute",
		NTType:     19,
		Index:      53,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `RangeAttribute : "range" ":" Range	<< attributes.NewRangeAttribute(X[2]), nil >>`,
		Id:         "RangeAttribute",
		NTType:     20,
		Index:      54,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return attributes.NewRangeAttribute(X[2]), nil
		},
	},
	ProdTabEntry{
		String: `ExportAsAttribute : "exportAs" ":" str	<< attributes.NewExportAsAttribute(X[2]), nil >>`,
		Id:         "ExportAsAttribute",
		NTType:     21,
		Index:      55,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return attributes.NewExportAsAttribute(X[2]), nil
		},
	},
	ProdTabEntry{
		String: `PrecisionAttribute : "precision" ":" MathExpr	<< attributes.NewPrecisionAttribute(X[2]), nil >>`,
		Id:         "PrecisionAttribute",
		NTType:     22,
		Index:      56,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return attributes.NewPrecisionAttribute(X[2]), nil
		},
	},
	ProdTabEntry{
		String: `MessageAttribute : "message"	<< attributes.NewMessageAttribute(), nil >>`,
		Id:         "MessageAttribute",
		NTType:     23,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return attributes.NewMessageAttribute(), nil
		},
	},
	ProdTabEntry{
		String: `Range : "[" MathExpr "," MathExpr "]"	<< ast.NewRange(X[1], true, X[3], true) >>`,
		Id:         "Range",
		NTType:     24,
		Index:      58,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRange(X[1], true, X[3], true)
		},
	},
	ProdTabEntry{
		String: `Range : "[" MathExpr "," MathExpr ">"	<< ast.NewRange(X[1], true, X[3], false) >>`,
		Id:         "Range",
		NTType:     24,
		Index:      59,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRange(X[1], true, X[3], false)
		},
	},
	ProdTabEntry{
		String: `Range : "<" MathExpr "," MathExpr "]"	<< ast.NewRange(X[1], false, X[3], true) >>`,
		Id:         "Range",
		NTType:     24,
		Index:      60,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRange(X[1], false, X[3], true)
		},
	},
	ProdTabEntry{
		String: `Range : "<" MathExpr "," MathExpr ">"	<< ast.NewRange(X[1], false, X[3], false) >>`,
		Id:         "Range",
		NTType:     24,
		Index:      61,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRange(X[1], false, X[3], false)
		},
	},
	ProdTabEntry{
		String: `Number : integer	<< ast.ToFloat64(X[0]), nil >>`,
		Id:         "Number",
		NTType:     25,
		Index:      62,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ToFloat64(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Number : realNumber	<< ast.ToFloat64(X[0]), nil >>`,
		Id:         "Number",
		NTType:     25,
		Index:      63,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ToFloat64(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Number : "pi"	<< math.Pi, nil >>`,
		Id:         "Number",
		NTType:     25,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return math.Pi, nil
		},
	},
	ProdTabEntry{
		String: `Number : "e"	<< math.E, nil >>`,
		Id:         "Number",
		NTType:     25,
		Index:      65,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return math.E, nil
		},
	},
	ProdTabEntry{
		String: `Number : "-" "inf"	<< math.Inf(-1), nil >>`,
		Id:         "Number",
		NTType:     25,
		Index:      66,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return math.Inf(-1), nil
		},
	},
	ProdTabEntry{
		String: `Number : "inf"	<< math.Inf(1), nil >>`,
		Id:         "Number",
		NTType:     25,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return math.Inf(1), nil
		},
	},
	ProdTabEntry{
		String: `MathExpr : AddSub	<<  >>`,
		Id:         "MathExpr",
		NTType:     26,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AddSub : AddSub "+" MulDiv	<< X[0].(float64) + X[2].(float64), nil >>`,
		Id:         "AddSub",
		NTType:     27,
		Index:      69,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0].(float64) + X[2].(float64), nil
		},
	},
	ProdTabEntry{
		String: `AddSub : AddSub "-" MulDiv	<< X[0].(float64) - X[2].(float64), nil >>`,
		Id:         "AddSub",
		NTType:     27,
		Index:      70,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0].(float64) - X[2].(float64), nil
		},
	},
	ProdTabEntry{
		String: `AddSub : MulDiv	<< X[0], nil >>`,
		Id:         "AddSub",
		NTType:     27,
		Index:      71,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MulDiv : MulDiv "*" Pot	<< X[0].(float64) * X[2].(float64), nil >>`,
		Id:         "MulDiv",
		NTType:     28,
		Index:      72,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0].(float64) * X[2].(float64), nil
		},
	},
	ProdTabEntry{
		String: `MulDiv : MulDiv "/" Pot	<< X[0].(float64) / X[2].(float64), nil >>`,
		Id:         "MulDiv",
		NTType:     28,
		Index:      73,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0].(float64) / X[2].(float64), nil
		},
	},
	ProdTabEntry{
		String: `MulDiv : Pot	<< X[0], nil >>`,
		Id:         "MulDiv",
		NTType:     28,
		Index:      74,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Pot : Pot "^" Factor	<< math.Pow(X[0].(float64), X[2].(float64)), nil >>`,
		Id:         "Pot",
		NTType:     29,
		Index:      75,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return math.Pow(X[0].(float64), X[2].(float64)), nil
		},
	},
	ProdTabEntry{
		String: `Pot : Factor	<< X[0], nil >>`,
		Id:         "Pot",
		NTType:     29,
		Index:      76,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : "sqrt(" AddSub ")"	<< math.Sqrt(X[1].(float64)), nil >>`,
		Id:         "Factor",
		NTType:     30,
		Index:      77,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return math.Sqrt(X[1].(float64)), nil
		},
	},
	ProdTabEntry{
		String: `Factor : "(" AddSub ")"	<< X[1], nil >>`,
		Id:         "Factor",
		NTType:     30,
		Index:      78,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Factor : AddSub	<< X[0], nil >>`,
		Id:         "Factor",
		NTType:     30,
		Index:      79,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : Number	<< X[0], nil >>`,
		Id:         "Factor",
		NTType:     30,
		Index:      80,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
}
