// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"shrinken/sddl/token"
)

const (
	NoState    = -1
	NumStates  = 153
	NumSymbols = 186
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '-'
1: '0'
2: '-'
3: '"'
4: '"'
5: '.'
6: 'p'
7: 'a'
8: 'c'
9: 'k'
10: 'a'
11: 'g'
12: 'e'
13: 'u'
14: 's'
15: 'e'
16: 'c'
17: 'l'
18: 'a'
19: 's'
20: 's'
21: '{'
22: '}'
23: ':'
24: 's'
25: 't'
26: 'r'
27: 'u'
28: 'c'
29: 't'
30: 'e'
31: 'n'
32: 'u'
33: 'm'
34: 'i'
35: 'n'
36: 't'
37: 'i'
38: 'n'
39: 't'
40: '3'
41: '2'
42: 'i'
43: 'n'
44: 't'
45: '6'
46: '4'
47: 'l'
48: 'o'
49: 'n'
50: 'g'
51: 's'
52: 'h'
53: 'o'
54: 'r'
55: 't'
56: 'u'
57: 'i'
58: 'n'
59: 't'
60: 'u'
61: 'i'
62: 'n'
63: 't'
64: '3'
65: '2'
66: 'u'
67: 'i'
68: 'n'
69: 't'
70: '6'
71: '4'
72: 'u'
73: 'l'
74: 'o'
75: 'n'
76: 'g'
77: 'u'
78: 's'
79: 'h'
80: 'o'
81: 'r'
82: 't'
83: 'b'
84: 'y'
85: 't'
86: 'e'
87: 'b'
88: 'o'
89: 'o'
90: 'l'
91: 's'
92: 't'
93: 'r'
94: 'i'
95: 'n'
96: 'g'
97: 'c'
98: 'h'
99: 'a'
100: 'r'
101: 'f'
102: 'l'
103: 'o'
104: 'a'
105: 't'
106: 'd'
107: 'o'
108: 'u'
109: 'b'
110: 'l'
111: 'e'
112: '['
113: ']'
114: '['
115: ']'
116: ','
117: '@'
118: 'r'
119: 'a'
120: 'n'
121: 'g'
122: 'e'
123: 'e'
124: 'x'
125: 'p'
126: 'o'
127: 'r'
128: 't'
129: 'A'
130: 's'
131: 'p'
132: 'r'
133: 'e'
134: 'c'
135: 'i'
136: 's'
137: 'i'
138: 'o'
139: 'n'
140: 'm'
141: 'e'
142: 's'
143: 's'
144: 'a'
145: 'g'
146: 'e'
147: '>'
148: '<'
149: 'p'
150: 'i'
151: 'e'
152: '-'
153: 'i'
154: 'n'
155: 'f'
156: '+'
157: '*'
158: '/'
159: '^'
160: 's'
161: 'q'
162: 'r'
163: 't'
164: '('
165: ')'
166: '('
167: '/'
168: '/'
169: '\n'
170: '/'
171: '*'
172: '*'
173: '*'
174: '/'
175: '.'
176: '_'
177: ' '
178: '\t'
179: '\n'
180: '\r'
181: '0'-'9'
182: '1'-'9'
183: 'a'-'z'
184: 'A'-'Z'
185: .
*/
