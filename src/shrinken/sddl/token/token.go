// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"package",
		"packageName",
		"letters",
		"empty",
		"use",
		"str",
		"class",
		"{",
		"}",
		":",
		"struct",
		"enum",
		"int",
		"int32",
		"int64",
		"long",
		"short",
		"uint",
		"uint32",
		"uint64",
		"ulong",
		"ushort",
		"byte",
		"bool",
		"string",
		"char",
		"float",
		"double",
		"[]",
		"[",
		"integer",
		"]",
		",",
		"@",
		"range",
		"exportAs",
		"precision",
		"message",
		">",
		"<",
		"realNumber",
		"pi",
		"e",
		"-",
		"inf",
		"+",
		"*",
		"/",
		"^",
		"sqrt(",
		")",
		"(",
	},

	idMap: map[string]Type{
		"INVALID":     0,
		"$":           1,
		"package":     2,
		"packageName": 3,
		"letters":     4,
		"empty":       5,
		"use":         6,
		"str":         7,
		"class":       8,
		"{":           9,
		"}":           10,
		":":           11,
		"struct":      12,
		"enum":        13,
		"int":         14,
		"int32":       15,
		"int64":       16,
		"long":        17,
		"short":       18,
		"uint":        19,
		"uint32":      20,
		"uint64":      21,
		"ulong":       22,
		"ushort":      23,
		"byte":        24,
		"bool":        25,
		"string":      26,
		"char":        27,
		"float":       28,
		"double":      29,
		"[]":          30,
		"[":           31,
		"integer":     32,
		"]":           33,
		",":           34,
		"@":           35,
		"range":       36,
		"exportAs":    37,
		"precision":   38,
		"message":     39,
		">":           40,
		"<":           41,
		"realNumber":  42,
		"pi":          43,
		"e":           44,
		"-":           45,
		"inf":         46,
		"+":           47,
		"*":           48,
		"/":           49,
		"^":           50,
		"sqrt(":       51,
		")":           52,
		"(":           53,
	},
}
